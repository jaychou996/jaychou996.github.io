<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jaychou996</title>
  
  <subtitle>mybolgs</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-27T08:59:48.623Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lixu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring框架学习(二)</title>
    <link href="http://yoursite.com/2020/08/27/pring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2020/08/27/pring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</id>
    <published>2020-08-27T03:40:00.000Z</published>
    <updated>2020-08-27T08:59:48.623Z</updated>
    
    <content type="html"><![CDATA[<h4 id="用注解的方式装配Bean"><a href="#用注解的方式装配Bean" class="headerlink" title="用注解的方式装配Bean"></a>用注解的方式装配Bean</h4><h5 id="使用-Component注解装配"><a href="#使用-Component注解装配" class="headerlink" title="使用@Component注解装配"></a>使用@Component注解装配</h5><p>创建一个Student类</p><pre><code>import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Component(value = &quot;student&quot;)public class Student &#123;  @Value(&quot;1&quot;)  private int id;  @Value(&quot;周杰伦&quot;)  private  String name;  @Value(&quot;男&quot;)  private String sex;  @Value(&quot;41&quot;)  private int age;  //set、get方法</code></pre><p>@Component(value = “student”)注解表示Spring 会把这个类扫描成一个bean实例，只有一个value值，value可以省略，可以简写成@Component。</p><p>@Value注解和xml中property标签的value属性是一样的<br>上面的注解方式相当于下面的xml。</p><pre><code> &lt;bean name=&quot;student&quot; class=&quot;Student&quot;&gt;    &lt;property name=&quot;id&quot; value=&quot;1&quot;/&gt;    &lt;property name=&quot;name&quot; value=&quot;周杰伦&quot;/&gt;    &lt;property name=&quot;sex&quot; value=&quot;男&quot;/&gt;    &lt;property name=&quot;age&quot; value=&quot;41&quot;/&gt;&lt;/bean&gt;</code></pre><p>在student同一包下创建一个AnnotationConfig类</p><pre><code>import org.springframework.context.annotation.ComponentScan;@ComponentScanpublic class AnnotationConfig &#123;&#125;</code></pre><p>@ComponentScan注解表示扫描所有带@Component注解的类，默认是当前包的路径。</p><p>运行一下测试方法</p><pre><code>import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;public class SpringTest &#123;  @Test  public void test()&#123;      ApplicationContext context = new AnnotationConfigApplicationContext(AnnotationConfig.class);      Student student = context.getBean(&quot;student&quot;, Student.class);      System.out.println(student);  &#125;&#125;</code></pre><p>结果</p><pre><code>com.Student&#123;id=1, name=&#39;周杰伦&#39;, sex=&#39;男&#39;, age=41&#125;Process finished with exit code 0</code></pre><p>@ComponentScan有和basePackeges属性，值可以是字符串数组，{包1，包2···}，扫描多个包。</p><h5 id="使用-Autowired自动装配-注入"><a href="#使用-Autowired自动装配-注入" class="headerlink" title="使用@Autowired自动装配(注入)"></a>使用@Autowired自动装配(注入)</h5><p>创建一个班级类</p><pre><code>import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;@Componentpublic class Classes &#123;  @Autowired  private Student student;  public void studentInfo()&#123;  System.out.println(&quot;班上有个&quot;+student.getSex()+&quot;学生，叫&quot;+student.getName()+&quot;今年&quot;+student.getAge()+&quot;岁&quot;);  &#125;  //set、get方法&#125;</code></pre><p>相当于xml文件的</p><pre><code>&lt;bean name=&quot;classes&quot; class=&quot;com.Classes&quot;&gt;    &lt;property name=&quot;student&quot; ref=&quot;student&quot;/&gt;&lt;/bean&gt;</code></pre><p>运行一下测试方法</p><pre><code>@Testpublic void test2()&#123;    ApplicationContext context = new AnnotationConfigApplicationContext(AnnotationConfig.class);    Classes classes = context.getBean(&quot;classes&quot;,Classes.class);    classes.studentInfo();&#125;</code></pre><p>结果</p><pre><code>班上有个男学生，叫周杰伦今年41岁Process finished with exit code 0</code></pre><p>当使用@Autowired来注入有多个相同类型的Bean时(有两个student)，可以使用@Primary注解，首要的，会优先注入使用该注解的类。@Qualifier注解，可以指定Bean的名称，@Qualifier(“Bean的名称”)。</p><h5 id="使用-Bean装配"><a href="#使用-Bean装配" class="headerlink" title="使用@Bean装配"></a>使用@Bean装配</h5><p>创建一个BeanTest类</p><pre><code>import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class BeanTest &#123;  @Bean(name = &quot;testBean&quot;)  public void test()&#123;      System.out.println(&quot;测试@Bean注解&quot;);  &#125;&#125;</code></pre><p>运行测试方法</p><pre><code>@Testpublic void test3()&#123;    //扫描com包    ApplicationContext context = new AnnotationConfigApplicationContext(&quot;com&quot;);    //直接调用了@Bean注解的test方法    context.getBean(&quot;testBean&quot;);&#125;</code></pre><p>结果</p><pre><code>测试@Bean注解Process finished with exit code 0</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;用注解的方式装配Bean&quot;&gt;&lt;a href=&quot;#用注解的方式装配Bean&quot; class=&quot;headerlink&quot; title=&quot;用注解的方式装配Bean&quot;&gt;&lt;/a&gt;用注解的方式装配Bean&lt;/h4&gt;&lt;h5 id=&quot;使用-Component注解装配&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring框架学习(一)</title>
    <link href="http://yoursite.com/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-25T03:45:00.000Z</published>
    <updated>2020-08-27T03:35:10.215Z</updated>
    
    <content type="html"><![CDATA[<h5 id="spring中的重要概念"><a href="#spring中的重要概念" class="headerlink" title="spring中的重要概念"></a>spring中的重要概念</h5><pre><code>    spring中有两个重要的概念：IoC (Inversion of Control，控制反转) 和 AOP(Aspect Oriented Programming    ，面向切面编程)。</code></pre><h5 id="个人对spring的理解"><a href="#个人对spring的理解" class="headerlink" title="个人对spring的理解"></a>个人对spring的理解</h5><pre><code>    spring是一个容器，来管理我们需要的BEAN。    IoC：控制反转，将我们手动创建对象的控制权交给了spring框架不需要关心创建对象的过程。举个例子：我们要吃    饭，本来是要自己做，去饭店吃，就可以把做饭这件事叫个饭店来做，我们不需要关心对饭的过程，只需要告诉饭店    要吃什么。    DI：Dependency Injection（依赖注入），在Spring创建过程中，将对象依赖的属性，比如对象、集合等通过配置设    置给该对象。    AOP：面向切面编程。在面向切边的编程思想里，把功能分为核心业务功能(对数据的操作等)和周边业务功能(事务、    日志等)。在不改变源码的情况下，对代码进行增强。    切入点：在哪些类哪些方法上切入(核心业务)    通知：在执行的实际方法前后做什么(周边业务)    切面：切面=切点+通知    织入：把切面加入到对象，并创建出代理对象的过程(由spring完成)</code></pre><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><h6 id="Ioc"><a href="#Ioc" class="headerlink" title="Ioc"></a>Ioc</h6><pre><code>首先创建一个maven项目</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-4.png" alt="upload successful"></p><pre><code>修改pom.xml文件引入要使用jar包坐标</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-5.png" alt="upload successful"></p><pre><code>创建一个Food类，给属性都设置get、set方法</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-6.png" alt="upload successful"></p><pre><code>创建一个applicationContext.xml文件，并配置Food的信息</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-7.png" alt="upload successful"></p><pre><code>创建一个测试类</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-8.png" alt="upload successful"></p><pre><code>运行结果</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-9.png" alt="upload successful"></p><h6 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h6><pre><code>创建一个restaurant类</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-10.png" alt="upload successful"></p><pre><code>在application.xml文件中配置Restaurant，并注入Food</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-11.png" alt="upload successful"></p><pre><code>运行一下测试方法</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-12.png" alt="upload successful"></p><pre><code>结果</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-13.png" alt="upload successful"></p><h6 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h6><pre><code>创建一个业务类</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-14.png" alt="upload successful"></p><pre><code>创建一个日志类</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-15.png" alt="upload successful"></p><pre><code>在applicationContext中配置AOP</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-17.png" alt="upload successful"></p><pre><code>运行一下测试方法</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-18.png" alt="upload successful"></p><pre><code>结果</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-19.png" alt="upload successful"></p><h6 id="配置复杂set、list、map等"><a href="#配置复杂set、list、map等" class="headerlink" title="配置复杂set、list、map等"></a>配置复杂set、list、map等</h6><pre><code>创建一个Complex类</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-20.png" alt="upload successful"></p><pre><code>配置applicationContext.xml文件</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-21.png" alt="upload successful"></p><pre><code>运行一下测试方法</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-22.png" alt="upload successful"></p><pre><code>结果</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/pasted-23.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;spring中的重要概念&quot;&gt;&lt;a href=&quot;#spring中的重要概念&quot; class=&quot;headerlink&quot; title=&quot;spring中的重要概念&quot;&gt;&lt;/a&gt;spring中的重要概念&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;    spring中有两个重要的概念：Io</summary>
      
    
    
    
    <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
    <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://yoursite.com/2020/08/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2020/08/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2020-08-18T09:26:43.000Z</published>
    <updated>2020-08-27T03:39:37.124Z</updated>
    
    <content type="html"><![CDATA[<h5 id="第一篇博客-标题"><a href="#第一篇博客-标题" class="headerlink" title="第一篇博客 标题"></a>第一篇博客 标题</h5><p>内容：我的第一篇博客</p><pre><code>代码：    java</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;第一篇博客-标题&quot;&gt;&lt;a href=&quot;#第一篇博客-标题&quot; class=&quot;headerlink&quot; title=&quot;第一篇博客 标题&quot;&gt;&lt;/a&gt;第一篇博客 标题&lt;/h5&gt;&lt;p&gt;内容：我的第一篇博客&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;代码：
    java&lt;/code&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/08/18/hello-world/"/>
    <id>http://yoursite.com/2020/08/18/hello-world/</id>
    <published>2020-08-18T09:18:57.031Z</published>
    <updated>2020-08-18T09:18:57.031Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
