<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jaychou996</title>
  
  <subtitle>mybolgs</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-02T06:31:58.722Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lixu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springMVC框架学习(二)</title>
    <link href="http://yoursite.com/2020/08/31/ringMVC%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2020/08/31/ringMVC%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</id>
    <published>2020-08-31T11:06:09.000Z</published>
    <updated>2020-09-02T06:31:58.722Z</updated>
    
    <content type="html"><![CDATA[<h5 id="model-addAttribute-的使用"><a href="#model-addAttribute-的使用" class="headerlink" title="model.addAttribute()的使用"></a>model.addAttribute()的使用</h5><p>导入jsp的jar包</p><pre><code>&lt;!--servlet-api.jar 是servlet 3.0 版本之前的地址javax.servlet-api.jar 是servlet 3.0 版本之后的地址--&gt;&lt;dependency&gt;  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;  &lt;version&gt;3.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;!--jstl标签库--&gt;&lt;dependency&gt;  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;  &lt;artifactId&gt;jstl&lt;/artifactId&gt;  &lt;version&gt;1.2&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>创建一个collection类</p><pre><code>import Demo.pojo.User;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@Controllerpublic class TestController &#123;    @RequestMapping(&quot;addAttr&quot;)//&quot;addAttr&quot;：访问的路径    public String addAttr(Model model)&#123;        //list        List&lt;String&gt; list = new ArrayList&lt;&gt;();        list.add(&quot;hello&quot;);        list.add(&quot;world&quot;);        model.addAttribute(&quot;list&quot;,list);        //map        Map&lt;String,String&gt; map = new HashMap&lt;&gt;();        map.put(&quot;1&quot;,&quot;hello&quot;);        map.put(&quot;2&quot;,&quot;world&quot;);        model.addAttribute(&quot;map&quot;,map);        //对象        User user = new User();        user.setName(&quot;周杰伦&quot;);        user.setAge(41);        model.addAttribute(&quot;user&quot;,user);        return &quot;addAttr&quot;;//&quot;addAttr&quot;：jsp页面的名称    &#125;&#125;</code></pre><p>创建一个jsp</p><pre><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;addAttr.jsp&lt;/title&gt;&lt;/head&gt;&lt;br&gt;List&lt;br&gt;&lt;c:forEach items=&quot;$&#123;list&#125;&quot; var=&quot;i&quot;&gt;    $&#123;i&#125;&lt;br&gt;&lt;/c:forEach&gt;Map&lt;br&gt;&lt;c:forEach items=&quot;$&#123;map&#125;&quot; var=&quot;entry&quot;&gt;    key:$&#123;entry.key&#125;&lt;br&gt;    value:$&#123;entry.value&#125;&lt;br&gt;&lt;/c:forEach&gt;对象&lt;br&gt;$&#123;user.name&#125;&lt;br&gt;$&#123;user.age&#125;&lt;br&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>结果</p><pre><code>访问地址：http://localhost:8080/addAttr结果：List      hello      world      Map      key:1      value:hello      key:2      value:world      对象      周杰伦      41</code></pre><h5 id="重定向和转发"><a href="#重定向和转发" class="headerlink" title="重定向和转发"></a>重定向和转发</h5><p>重定向</p><pre><code>不带参数的重定向  @RequestMapping(&quot;redirect1&quot;)//访问路径  public String redirect1()&#123;      return &quot;redirect:hello&quot;;//重定向的地址  &#125;访问http://localhost:8080/redirect1会重定向到http://localhost:8080/hello带参数的重定向@RequestMapping(&quot;redirect2&quot;)//访问路径public String redirect2(RedirectAttributes attributes)&#123;    attributes.addAttribute(&quot;message&quot;,&quot;从redirect2重定向到redirect0&quot;);    return &quot;redirect:redirect0&quot;;//重定向的地址&#125;@RequestMapping(&quot;redirect3&quot;)public String redirect3(RedirectAttributes attributes)&#123;    attributes.addFlashAttribute(&quot;message&quot;,&quot;从redirect3重定向到redirect00&quot;);    return &quot;redirect:redirect00&quot;;&#125;创建一个RederectController类import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;@Controllerpublic class RedirectController &#123;    @RequestMapping(&quot;redirect0&quot;)    public String redirectTest(@RequestParam String message, Model model)&#123;        model.addAttribute(&quot;message&quot;,message);        return &quot;redirect&quot;;    &#125;    @RequestMapping(&quot;redirect00&quot;)    public String redirectTest2(@ModelAttribute(&quot;message&quot;) String message,Model model)&#123;        model.addAttribute(&quot;message&quot;,message);        return &quot;redirect&quot;;    &#125;&#125;创建一个redirect.jsp&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;redirect.jsp&lt;/title&gt;&lt;/head&gt;&lt;body&gt;$&#123;message&#125;&lt;/body&gt;&lt;/html&gt;结果访问http://localhost:8080/redirect2重定向到http://localhost:8080/redirect0   显示 ?redirect1????redirect0  (???怎么会乱码)访问http://localhost:8080/redirect3重定向到http://localhost:8080/redirect00  显示 从redirect3重定向到redirect00两种设置参数的区别：addAttribute(“param”, value);这种方式就相当于重定向之后，在url后面拼接参数，这样在重定向之后的页面或者控制器再去获取url后面的参数就可以了，但这个方式因为是在url后面添加参数的方式，所以暴露了参数，有风险。addFlashAttribute(“param”, value);这种方式也能达到重新向带参，而且能隐藏参数，其原理就是放到session中，session在跳到页面后马上移除对象。</code></pre><p>转发</p><pre><code>默认是转发到jsp，forword可以省略，如果要转发到controller上，必须加上forward。@RequestMapping(&quot;forward&quot;)public String forward(Model model)&#123;    model.addAttribute(&quot;message&quot;,&quot;转发的hello，world&quot;);    return &quot;forward:hello2&quot;;&#125;@RequestMapping(&quot;hello2&quot;)public String hello()&#123;    //寻找WEB-INF目录下view/hello.jsp文件    return &quot;hello&quot;;&#125;   访问http://localhost:8080/forward，地址栏不会发生变化 显示  转发的hello，world</code></pre><p>重定向和转发的区别</p><pre><code>重定向：客户端发送了两次请求，不能共享数据，重定向的路径可以是任意路径，重定向时地址栏会发生改变。转发：客户端只发送一次请求，转发的路径只能是同一web容器下的路径，数据可以共享，转发地址栏不会改变。</code></pre><h5 id="设置字符编码过滤器"><a href="#设置字符编码过滤器" class="headerlink" title="设置字符编码过滤器"></a>设置字符编码过滤器</h5><pre><code>在web.xml中配置    &lt;filter&gt;    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;!--需要使用的字符集--&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;init-param&gt;        &lt;!--强制设置编码为utf-8--&gt;        &lt;param-name&gt;forceEncoding&lt;/param-name&gt;        &lt;param-value&gt;true&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;前面重定向时乱码，再试一次访问访问http://localhost:8080/redirect2重定向到http://localhost:8080/redirect0地址栏显示  http://localhost:8080/redirect0?message=从redirect2重定向到redirect0页面显示  从redirect2重定向到redirect0</code></pre><h5 id="表单数据提交"><a href="#表单数据提交" class="headerlink" title="表单数据提交"></a>表单数据提交</h5><p>在webapp创建一个form.html作为数据提交页面，WEBINF 是项目的安全目录，无法直接通过在浏览器上敲地址访问。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;ZH&quot; &gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;form.html&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;/form&quot; method=&quot;post&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;    &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p> 创建一个form.jsp页面作为数据回显页面</p><pre><code> &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;form.jsp&lt;/title&gt;&lt;/head&gt;&lt;body&gt;用户名：$&#123;username&#125;&lt;br&gt;密码：$&#123;password&#125;&lt;br&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>后端接收数据</p><pre><code>@RequestMapping(&quot;form&quot;)public String getForm(String username,String password,Model model)&#123;    model.addAttribute(&quot;username&quot;,username);    model.addAttribute(&quot;password&quot;,password);    return &quot;form&quot;;&#125;或者@RequestMapping(&quot;form&quot;)public String getForm(HttpServletRequest request,Model model)&#123;    model.addAttribute(&quot;username&quot;,request.getParameter(&quot;username&quot;));    model.addAttribute(&quot;password&quot;,request.getParameter(&quot;password&quot;));    return &quot;form&quot;;&#125;或者用注解@RequestParam绑定请求参数    @RequestMapping(&quot;form&quot;)public String getFrom(@RequestParam(&quot;username&quot;) String username,@RequestParam(&quot;password&quot;) String password,Model model)&#123;    model.addAttribute(&quot;username&quot;,username);    model.addAttribute(&quot;password&quot;,password);    return &quot;form&quot;;&#125;访问http://localhost:8080/form.html需要在web.xml文件加下面的配置&lt;servlet-mapping&gt;    &lt;servlet-name&gt;default&lt;/servlet-name&gt;    &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;model-addAttribute-的使用&quot;&gt;&lt;a href=&quot;#model-addAttribute-的使用&quot; class=&quot;headerlink&quot; title=&quot;model.addAttribute()的使用&quot;&gt;&lt;/a&gt;model.addAttribute(</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>springMVC框架学习(一)</title>
    <link href="http://yoursite.com/2020/08/29/pringMVC%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/08/29/pringMVC%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-29T03:22:36.000Z</published>
    <updated>2020-08-31T11:05:39.234Z</updated>
    
    <content type="html"><![CDATA[<h5 id="spring和springMVC的联系"><a href="#spring和springMVC的联系" class="headerlink" title="spring和springMVC的联系"></a>spring和springMVC的联系</h5><p>springMVC是spring的子容器，springMVC就是建立在spring应用平台之上的MVC模型，springMVC主要是构建web应用程序，注册web组件的Bean，如控制器、处理引射器、视图解析器等，spring主要是驱动后端的中间层和数据层的组件。</p><h5 id="springMVC基本流程"><a href="#springMVC基本流程" class="headerlink" title="springMVC基本流程"></a>springMVC基本流程</h5><p>1、http请求：客户端提交请求到DispatcherServlet。<br>2、寻找处理器：DispatcherServlet是spring提供的前端控制器，所有请求都是它来发放的，但是需要HandlerMapping定位到具体的Controller。<br>3、调用处理器：在DispatcherServlet通过HandlerMapping找到控制器后，它就将请求提交到Controller。<br>4、调用模型处理业务：Controller执行相关的逻辑代码<br>5、ModelAndView：在Controller执行完相关的处理后，返回ModelAndView。<br>6、处理试图映射：ViewResolver是视图解析器，将逻辑视图解析为真正的视图，同时取出model(将user解析为user.jsp)</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>创建一个maven项目，导入jar包</p><pre><code>&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;  &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>配置web.xml文件</p><pre><code>    &lt;!--配置springMVC DispatcherServlet前端控制器--&gt;&lt;servlet&gt;    &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;        &lt;!--配置dispatcher-servlet.xml作为DispatcherServlet的配置文件        如果不配置，会在WEB-INF下找springMVC.xml的文件        contextConfigLocation是ContextLoader类的常量CONGIF_LOACATION_PARAM，固定值--&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;/WEB-INF/dispatcher-servlet.xml&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;!--将所有的请求都交给名为springMVC的这个servlet处理--&gt;    &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;    &lt;!--/ 会匹配到/webapp这样的路径型url，不会匹配到.jsp这样的后缀型url        /* 会匹配到所有的url，路径型和后缀型--&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><p>配置dispatcher-servlet.xml文件</p><pre><code>&lt;!--配置一个视图解析器，对模型视图名称的解析--&gt;&lt;bean id=&quot;defaultViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;    &lt;!--设置文件的路径和后缀-配置一个视图解析器        这里面的意思是：加入此时viewName为hello,那么它会到WEB-INF/jsp/hello.jsp中去寻找--&gt;    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view/&quot;/&gt;    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;&lt;/bean&gt;</code></pre><p>创建Controller控制器</p><pre><code>创建控制器有两种方法：1、创建一个类，实现Controller接口，实现接口的方法，在model中填充元素，返回ModelAndView，这种方法要在dispatcher-servlet.xml中配置bean。import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.mvc.Controller;public class HelloController implements Controller &#123;  @Override  public ModelAndView handleRequest(javax.servlet.http.HttpServletRequest httpServletRequest, javax.servlet.http.HttpServletResponse httpServletResponse) throws Exception &#123;      ModelAndView modelAndView = new ModelAndView();      modelAndView.addObject(&quot;message&quot;,&quot;hello,world&quot;);      modelAndView.setViewName(&quot;hello&quot;);      return modelAndView;  &#125;&#125;dispacther-servlet.xml的配置&lt;!--此时name相当于URI--&gt;&lt;bean name=&quot;/hello&quot; class=&quot;Demo.controller.HelloController&quot;/&gt;使用注解的方式import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class HelloController&#123;  //URI  @RequestMapping(&quot;hello&quot;)  public String hello(Model model)&#123;      model.addAttribute(&quot;message&quot;,&quot;hello,world&quot;);      //寻找WEB-INF目录下view/hello.jsp文件      return &quot;hello&quot;;    &#125;&#125;dispacther-servlet.xml的配置&lt;!--自动扫描装配--&gt;&lt;context:component-scan base-package=&quot;Demo.controller&quot;/&gt;</code></pre><p>创建一个jsp</p><pre><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;hello.jsp&lt;/title&gt;&lt;/head&gt;&lt;body&gt;$&#123;requestScope.message&#125;&lt;/body&gt;&lt;/html&gt;</code></pre><p>结果</p><pre><code>访问 http://localhost:8080/hello显示：hello,world</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;spring和springMVC的联系&quot;&gt;&lt;a href=&quot;#spring和springMVC的联系&quot; class=&quot;headerlink&quot; title=&quot;spring和springMVC的联系&quot;&gt;&lt;/a&gt;spring和springMVC的联系&lt;/h5&gt;&lt;p&gt;sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>spring框架学习(二)</title>
    <link href="http://yoursite.com/2020/08/27/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2020/08/27/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</id>
    <published>2020-08-27T03:40:00.000Z</published>
    <updated>2020-08-27T09:12:32.005Z</updated>
    
    <content type="html"><![CDATA[<h4 id="用注解的方式装配Bean"><a href="#用注解的方式装配Bean" class="headerlink" title="用注解的方式装配Bean"></a>用注解的方式装配Bean</h4><h5 id="使用-Component注解装配"><a href="#使用-Component注解装配" class="headerlink" title="使用@Component注解装配"></a>使用@Component注解装配</h5><p>创建一个Student类</p><pre><code>import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Component(value = &quot;student&quot;)public class Student &#123;  @Value(&quot;1&quot;)  private int id;  @Value(&quot;周杰伦&quot;)  private  String name;  @Value(&quot;男&quot;)  private String sex;  @Value(&quot;41&quot;)  private int age;  //set、get方法</code></pre><p>@Component(value = “student”)注解表示Spring 会把这个类扫描成一个bean实例，只有一个value值，value可以省略，可以简写成@Component。</p><p>@Value注解和xml中property标签的value属性是一样的<br>上面的注解方式相当于下面的xml。</p><pre><code> &lt;bean name=&quot;student&quot; class=&quot;Student&quot;&gt;    &lt;property name=&quot;id&quot; value=&quot;1&quot;/&gt;    &lt;property name=&quot;name&quot; value=&quot;周杰伦&quot;/&gt;    &lt;property name=&quot;sex&quot; value=&quot;男&quot;/&gt;    &lt;property name=&quot;age&quot; value=&quot;41&quot;/&gt;&lt;/bean&gt;</code></pre><p>在student同一包下创建一个AnnotationConfig类</p><pre><code>import org.springframework.context.annotation.ComponentScan;@ComponentScanpublic class AnnotationConfig &#123;&#125;</code></pre><p>@ComponentScan注解表示扫描所有带@Component注解的类，默认是当前包的路径。</p><p>运行一下测试方法</p><pre><code>import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;public class SpringTest &#123;  @Test  public void test()&#123;      ApplicationContext context = new AnnotationConfigApplicationContext(AnnotationConfig.class);      Student student = context.getBean(&quot;student&quot;, Student.class);      System.out.println(student);  &#125;&#125;</code></pre><p>结果</p><pre><code>com.Student&#123;id=1, name=&#39;周杰伦&#39;, sex=&#39;男&#39;, age=41&#125;Process finished with exit code 0</code></pre><p>@ComponentScan有和basePackeges属性，值可以是字符串数组，{包1，包2···}，扫描多个包。</p><h5 id="使用-Autowired自动装配-注入"><a href="#使用-Autowired自动装配-注入" class="headerlink" title="使用@Autowired自动装配(注入)"></a>使用@Autowired自动装配(注入)</h5><p>创建一个班级类</p><pre><code>import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;@Componentpublic class Classes &#123;  @Autowired  private Student student;  public void studentInfo()&#123;  System.out.println(&quot;班上有个&quot;+student.getSex()+&quot;学生，叫&quot;+student.getName()+&quot;今年&quot;+student.getAge()+&quot;岁&quot;);  &#125;  //set、get方法&#125;</code></pre><p>相当于xml文件的</p><pre><code>&lt;bean name=&quot;classes&quot; class=&quot;com.Classes&quot;&gt;    &lt;property name=&quot;student&quot; ref=&quot;student&quot;/&gt;&lt;/bean&gt;</code></pre><p>运行一下测试方法</p><pre><code>@Testpublic void test2()&#123;    ApplicationContext context = new AnnotationConfigApplicationContext(AnnotationConfig.class);    Classes classes = context.getBean(&quot;classes&quot;,Classes.class);    classes.studentInfo();&#125;</code></pre><p>结果</p><pre><code>班上有个男学生，叫周杰伦今年41岁Process finished with exit code 0</code></pre><p>当使用@Autowired来注入有多个相同类型的Bean时(有两个student)，可以使用@Primary注解，首要的，会优先注入使用该注解的类。@Qualifier注解，可以指定Bean的名称，@Qualifier(“Bean的名称”)。</p><h5 id="使用-Bean装配"><a href="#使用-Bean装配" class="headerlink" title="使用@Bean装配"></a>使用@Bean装配</h5><p>创建一个BeanTest类</p><pre><code>import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class BeanTest &#123;  @Bean(name = &quot;testBean&quot;)  public void test()&#123;      System.out.println(&quot;测试@Bean注解&quot;);  &#125;&#125;</code></pre><p>运行测试方法</p><pre><code>@Testpublic void test3()&#123;    //扫描com包    ApplicationContext context = new AnnotationConfigApplicationContext(&quot;com&quot;);    //直接调用了@Bean注解的test方法    context.getBean(&quot;testBean&quot;);&#125;</code></pre><p>结果</p><pre><code>测试@Bean注解Process finished with exit code 0</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;用注解的方式装配Bean&quot;&gt;&lt;a href=&quot;#用注解的方式装配Bean&quot; class=&quot;headerlink&quot; title=&quot;用注解的方式装配Bean&quot;&gt;&lt;/a&gt;用注解的方式装配Bean&lt;/h4&gt;&lt;h5 id=&quot;使用-Component注解装配&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="java框架" scheme="http://yoursite.com/categories/java%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring框架学习(一)</title>
    <link href="http://yoursite.com/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>http://yoursite.com/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/</id>
    <published>2020-08-25T03:45:00.000Z</published>
    <updated>2020-08-27T09:13:31.941Z</updated>
    
    <content type="html"><![CDATA[<h5 id="spring中的重要概念"><a href="#spring中的重要概念" class="headerlink" title="spring中的重要概念"></a>spring中的重要概念</h5><pre><code>    spring中有两个重要的概念：IoC (Inversion of Control，控制反转) 和 AOP(Aspect Oriented Programming    ，面向切面编程)。</code></pre><h5 id="个人对spring的理解"><a href="#个人对spring的理解" class="headerlink" title="个人对spring的理解"></a>个人对spring的理解</h5><pre><code>    spring是一个容器，来管理我们需要的BEAN。    IoC：控制反转，将我们手动创建对象的控制权交给了spring框架不需要关心创建对象的过程。举个例子：我们要吃    饭，本来是要自己做，去饭店吃，就可以把做饭这件事叫个饭店来做，我们不需要关心对饭的过程，只需要告诉饭店    要吃什么。    DI：Dependency Injection（依赖注入），在Spring创建过程中，将对象依赖的属性，比如对象、集合等通过配置设    置给该对象。    AOP：面向切面编程。在面向切边的编程思想里，把功能分为核心业务功能(对数据的操作等)和周边业务功能(事务、    日志等)。在不改变源码的情况下，对代码进行增强。    切入点：在哪些类哪些方法上切入(核心业务)    通知：在执行的实际方法前后做什么(周边业务)    切面：切面=切点+通知    织入：把切面加入到对象，并创建出代理对象的过程(由spring完成)</code></pre><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><h6 id="Ioc"><a href="#Ioc" class="headerlink" title="Ioc"></a>Ioc</h6><pre><code>首先创建一个maven项目</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-4.png" alt="upload successful"></p><pre><code>修改pom.xml文件引入要使用jar包坐标</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-5.png" alt="upload successful"></p><pre><code>创建一个Food类，给属性都设置get、set方法</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-6.png" alt="upload successful"></p><pre><code>创建一个applicationContext.xml文件，并配置Food的信息</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-7.png" alt="upload successful"></p><pre><code>创建一个测试类</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-8.png" alt="upload successful"></p><pre><code>运行结果</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-9.png" alt="upload successful"></p><h6 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h6><pre><code>创建一个restaurant类</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-10.png" alt="upload successful"></p><pre><code>在application.xml文件中配置Restaurant，并注入Food</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-11.png" alt="upload successful"></p><pre><code>运行一下测试方法</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-12.png" alt="upload successful"></p><pre><code>结果</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-13.png" alt="upload successful"></p><h6 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h6><pre><code>创建一个业务类</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-14.png" alt="upload successful"></p><pre><code>创建一个日志类</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-15.png" alt="upload successful"></p><pre><code>在applicationContext中配置AOP</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-17.png" alt="upload successful"></p><pre><code>运行一下测试方法</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-18.png" alt="upload successful"></p><pre><code>结果</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-19.png" alt="upload successful"></p><h6 id="配置复杂set、list、map等"><a href="#配置复杂set、list、map等" class="headerlink" title="配置复杂set、list、map等"></a>配置复杂set、list、map等</h6><pre><code>创建一个Complex类</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-20.png" alt="upload successful"></p><pre><code>配置applicationContext.xml文件</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-21.png" alt="upload successful"></p><pre><code>运行一下测试方法</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-22.png" alt="upload successful"></p><pre><code>结果</code></pre><p><img src= "/img/loading.gif" data-lazy-src="/2020/08/25/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%B8%80/pasted-23.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;spring中的重要概念&quot;&gt;&lt;a href=&quot;#spring中的重要概念&quot; class=&quot;headerlink&quot; title=&quot;spring中的重要概念&quot;&gt;&lt;/a&gt;spring中的重要概念&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;    spring中有两个重要的概念：Io</summary>
      
    
    
    
    <category term="java框架" scheme="http://yoursite.com/categories/java%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://yoursite.com/2020/08/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2020/08/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2020-08-18T09:26:43.000Z</published>
    <updated>2020-08-27T03:39:37.124Z</updated>
    
    <content type="html"><![CDATA[<h5 id="第一篇博客-标题"><a href="#第一篇博客-标题" class="headerlink" title="第一篇博客 标题"></a>第一篇博客 标题</h5><p>内容：我的第一篇博客</p><pre><code>代码：    java</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;第一篇博客-标题&quot;&gt;&lt;a href=&quot;#第一篇博客-标题&quot; class=&quot;headerlink&quot; title=&quot;第一篇博客 标题&quot;&gt;&lt;/a&gt;第一篇博客 标题&lt;/h5&gt;&lt;p&gt;内容：我的第一篇博客&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;代码：
    java&lt;/code&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/08/18/hello-world/"/>
    <id>http://yoursite.com/2020/08/18/hello-world/</id>
    <published>2020-08-18T09:18:57.031Z</published>
    <updated>2020-08-18T09:18:57.031Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
